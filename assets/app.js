// Your AWS region
AWS.config.region = 'us-east-1'; //
AWS.config.credentials = new AWS.CognitoIdentityCredentials({
    // This will be the identity pool from your federated identity pool and not your user pool id.
    IdentityPoolId: 'us-east-1:89aefcfc-6926-4b1f-aaff-9a31f01865e5',
    Logins: {
      // Here we'll set our Cognito user pool id. We'll check to see if a user logged in by getting the token from
      // localStorage which we will implement later
      'cognito-idp.us-east-1.amazonaws.com/us-east-1_Wu1kexoMX': JSON.parse(localStorage.getItem('token'))
    }
});

$(document).ready(function(){
   // Any time a page is loaded we'll check to see what the authentication status is
   updateAuthenticationStatus();
   // Since we're not using a framework and our example is very basic, we have a helper
   // function that checks to see if we're on the super secret admin page
   loadAdmin();
 });

 // We'll clean out the localStorage
 // The Cognito service sets various items here, so we'll make sure to empty out everything to log a user out.
 function logout(){
   localStorage.clear();
   window.location = '/';
 };

 function updateAuthenticationStatus(){
   $('#user').empty();
   $('#login').empty();
   // We'll check to see if a JWT exists and assume that if one is present the user is authenticated
   var user = localStorage.getItem('token');
   if(user){
     $('#user').show().append('<a onclick="logout()">Log out</a>');
     $('#login').hide();
   } else {
     $('#login').show().append('<a href="/login">Log in</a>');
     $('#user').hide();
   }
 }

function loadAdmin(){
  // We'll ensure this code runs only on the admin page
  if(window.location.pathname == '/admin/'){
    // Our first line of defense will be to check and make sure a JWT exists
    // If it doesn't we'll redirect back to the homepage
    if(localStorage.getItem('token')){
      // If the token is present, we'll call the appropriate AWS method to get
      // the currently logged in users credential keys
      AWS.config.credentials.get(function (err) {
        // We'll create an instance of our API Gateway client again
        // This time we'll pass in the required keys that will authenticate the request
        // The API Gateway SDK will take care of transforming these keys into the appropriate
        // header and will send out the request to our endpoint.
        var client = apigClientFactory.newClient({
          accessKey: AWS.config.credentials.accessKeyId,
          secretKey: AWS.config.credentials.secretAccessKey,
          sessionToken: AWS.config.credentials.sessionToken,
          region: 'us-east-1'
        });

        // Here we are calling the subscribersGet method that was generated for us
        // On a successful response we'll take the array of emails and display them
        // on our page.
        client.subscribersGet().then(function(data){
          for(var i = 0; i < data.data.message.length; i++){
            $('#subscribers').append('<h4>' + data.data.message[i].email + '</h4>');
          }
        });
      });
    } else {
      window.location = '/';
    }
  }
}

$('#newsletter').submit(function(e){
  e.preventDefault();

  // We'll set up a new API client.
  // This method comes from the SDK that was generated by API Gateway
  var client = apigClientFactory.newClient();

  // The SDK contains helper methods for all of the API endpoints we created.
  // Here we are using the subscribePost method which talks to our /subscribe endpoint
  // The second parameter is the body of our request, so here we will capture the email
  // provided and make the call to the API
  client.subscribePost({}, {email:$('#email').val()}, {})
  .then(function(data){
    // If all went well, we'll display a success message, otherwise we'll display an error.
    // Our Lambda response is wrapped in API Gateway's own response object, that is why we are
    // accessing data.data object.
    if(data.data.statusCode == 200){
      $('#newsletter').hide();
      $('#response').append('<div class="alert alert-success">'+ data.data.message +'</div>')
    } else {
      $('#newsletter').hide();
      $('#response').append('<div class="alert alert-danger">'+ data.data.message +'</div>')
    }
  })
})

$('#signin').submit(function(e){
  e.preventDefault();

  // We'll set the global permissions first
  AWSCognito.config.region = 'us-east-1';
  AWSCognito.config.credentials = new AWS.CognitoIdentityCredentials({
    // This will be the Pool Id from your Cognito user pool.
    IdentityPoolId: 'us-east-1_Wu1kexoMX'
  });
  // Need to provide placeholder keys unless unauthorised user access is enabled for user pool
  AWSCognito.config.update({accessKeyId: 'anything', secretAccessKey: 'anything'});

  // We'll additionally connect to our user pool through the app we created when we set up our
  // Cognito user pool.
  var userPool = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserPool({
    UserPoolId : 'us-east-1_Wu1kexoMX',
    ClientId : '338lf4ogqck7iajh8jqb1i4r9l'
  });

  // We'll capture the user login data from our sign in form.
  var authenticationData = {
    Username : $('#username').val(),
    Password : $('#password').val(),
  };

  // Finally, we'll create an object that will contain the username and user pool data
  // which we'll use for the authentication
  var userData = {
    Username : $('#username').val(),
    Pool : userPool
  };

  // Here we are invoking the Cognito services required to perform the authentication
  var authenticationDetails = new AWSCognito.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData);
  var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);

  // We'll do our user authentication here. If the authentication is successful, we'll grab the JWT
  // and store it in localStorage. If not, we'll display an error.
  // In a real application you'd probably want some better failure handling
  cognitoUser.authenticateUser(authenticationDetails, {
    onSuccess: function (result) {
      localStorage.setItem('token', JSON.stringify(result.idToken.jwtToken));
      window.location = '/';
    },
    onFailure: function(err) {
      console.log(err);
    }
  });
})